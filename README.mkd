# README

crctk is a toolkit that helps making using CRC32 as a checksum algorithm
for your files easier. As such, it provides functionality as described
in the following.

Stable releases are tagged in Git. The last stable release is [version
0.4.5](https://github.com/2ion/crctk/archive/0.4.5.tar.gz).

In the additon to the CLI binary crctk, a ncurses-based interface is
also in the workings! Its binary is named ncrctk and getting installed
alongside the basic crctk. It still is in alpha status, but certain
functionality may already be available. The goal is to get to feature
parity with the CLI. Both binaries will share large parts of the source
code.

## Compilation and installation

You need:

- gcc and g++ (or any other compatible C and C++ compilers)
- libncurses or libncursesw (you need the \*w version for Unicode
  support!)
- libkyotocabinet

On Debian, these may be installed using
```sh
sudo apt-get install libkyotocabinet-dev zlib1g-dev libncursesw5-dev gcc g++
```

crctk uses the GNU autotools for building so you go through the familiar
steps:

```sh
./configure --prefix=/your/chosen/prefix/path
make
sudo make install-strip
```

## Documentation

The documentation is written in pandoc markdown and located in /doc, so you can build a 
wide range of documentation formats! By default, we deliver HTML and manpage versions.

## Command line synposis

More concise usage information.

```
crctk - CRC32 Hexstring Toolkit
Copyright (C) 2014 Jens Oliver John (dev@2ion.de)
Usage: ./crctk [-aCcefhmnprstuVv] <file>|<file-listing>
Options:
-v, --verify
  Compute CRC32 and compare with the hexstring
  in the supplied filename.
-V DB-FILE, --verify-db DB-FILE
  Check whether the files record in the database
  still have the same CRC32 checksums
-x, --prefer-hexstring
  Supplements -V, -C. For any tagged file, use the
  hexstring as the reference CRC32
-c, --calc
  Compute the CRC32 for the given file and print
  it, then exit
-n, --numerical
  Supplements -c. Print the CRC32 in decimal
-C DB-FILE, --create-db DB-FILE
   For multiple input files, store a checksum DB
   in DB-FILE The target file will be overwritten
   if it exists.
-a, --append
   Supplements -C. Append to DB-FILE.
-m DB-FILE, --merge DB-FILE
   Given a list of database files as arguments,
   all of this files' contents will be merged
   into DB-FILE. The listed databases are not
   modified. Records will identical keys will
   replace each other in the order the database
   files were specified.
 -C DB-FILE, --create-db DB-FILE
   For multiple input files, create a checksum
   listing for use with the -V option. Overwrites
   the given file.
 -d DB-FILE, --delete DB-FILE
   Delete all files given as arguments from the
   database DB-FILE if such a record exists.
 -a, --append
   Supplements -C and -m. Append to the given
   database file instead of overwriting it.
 -p, --print
   For each database in the argument list,
   print its contents to stdout.
 -t, --tag
   Tag file with a CRC32 hexstring. Aborts if
   the filename does already contain a tag.
 -s, --strip-tag
   Supplements -t. strip eventually existing tag
   and compute a new CRC32 hexstring.
 -r, --remove-tag
   If the file is tagged, remove the tag.
 -e EXPR, --tag-regex EXPR
   Changes the regular expression used to
   match tags when doing -s|-r to EXPR. Default:
   [[:punct:]]\?[[:xdigit:]]\{8\}[[:punct:]]\?
 -h, --help
   Print this message and exit successfully.
--version
   Prints version and compilation information.
```
