.TH "crctk" "3" "Fri 7 Feb 2014" "" ""
.SH NAME
.PP
crctk \- CRC32 Hexstring Toolkit
.SH SYNPOSIS
.PP
\f[B]crctk\f[] [\f[I]OPTIONS\f[]]...
[\f[I]\-\-\f[]] [\f[I]FILE\f[]|\f[I]FILE\-LIST\f[]]
.SH DESCRIPTION
.PP
crctk is a program for checking the integrity of files using the CRC32
checksum algorithm and generating CRC32 checksum data.
The CRC32 checksums can be input and output in various ways.
.PP
Similar to tools like sha1sum(1), md5sum(1) and others, \f[I]crctk\f[]
is also used to create database files containing mappings from filepaths
to checksums, which can be used later on to verify a batch of files.
crctk, however, uses a binary format \-\- libtinycdb, an implementation
of Daniel J.
Bernstein\[aq]s CDB \-\- to address a problem with POSIX\-compliant
filepaths in textual form: Because filepaths may contain every character
except \[aq]\[aq] and \[aq]/\[aq], a binary format drastically
simplifies the parsing of filenames, while the textfiles from sha1sum et
al.
do not allow filenames containing \[aq]\[aq], for example.
CDB in turn is very fast, simple and stable.
.SS HEXSTRING TAGS
.PP
Because of their short length, it is common for CRC32 checksums to be
included as hexadecimal strings in the filename of a \f[I]FILE\f[].
Such tags are known to crctk as matching the regular expression
\f[B][[:punct:]]\\?[[:xdigit:]]\\{8\\}[[:punct:]]\\?\f[], that is a
hexadecimal string optionally surrounded by punctuation characters,
including brackets (example: [11FFAABB]).
crctk is also used to manage such tags: it can tag files, update tags
and use the CRC32 information from tags to validate a file.
.SH COMMAND LINE
.SS GENERAL OPTIONS
.IP \[bu] 2
\f[B]\-c|\-\-calc [\-n|\-\-numerical] [\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Compute the CRC32 checksum of \f[I]FILE\f[], print it to stdout and
exit.
If \f[I]\-n\f[] is present, the numerical value will be output instead
of the hexstring.
.IP \[bu] 2
\f[B]\-e|\-\-tag\-regex \f[I]EXPRESSION\f[] \f[]
.PD 0
.P
.PD
Replace the built\-in regex used to match tags (see section:
\f[B]HEXSTRING TAGS\f[]) with \f[I]EXPRESSION\f[].
.IP \[bu] 2
\f[B]\-h|\-\-help\f[]
.PD 0
.P
.PD
Print a help text and exit.
.SS OPTIONS INVOLVING TAGS
.IP \[bu] 2
\f[B]\-v|\-\-verify [\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Verify the integrity of \f[I]FILE\f[] using the tag in its filename.
.IP \[bu] 2
\f[B]\-t|\-\-tag [\-s|\-\-strip\-tag] [\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Tag \f[I]FILE\f[] with the hexstring of its CRC32 checksum.
Fails if \f[I]FILE\f[] has already been tagged.
If \f[I]\-s\f[] is present, strip any existing tag before appending the
new one.
.IP \[bu] 2
\f[B]\-r|\-\-remove\-tag [\-\-] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
If \f[I]FILE\f[] is tagged, remove the tag.
.SS OPTIONS INVOLVING DATABASES
.IP \[bu] 2
\f[B]\-p|\-\-print \f[I]DB\-FILE\f[] \f[]
.PD 0
.P
.PD
Print all records in \f[I]DB\-FILE\f[] to stdout and exit.
.IP \[bu] 2
\f[B]\-C|\-\-create\-db \f[I]DB\-FILE\f[] [\-a|\-\-append]
[\f[I]\-\-\f[]] \f[I]FILE\-LIST\f[] \f[]
.PD 0
.P
.PD
For a every \f[I]FILE\f[] in \f[I]FILE\-LIST\f[], record its path and
CRC32 checksum in the database \f[I]DB\-FILE\f[].
Relative filepaths are used.
If the same path appears more than once in \f[I]FILE\-LIST\f[], the
record will be overwritten.
Any pre\-existing \f[I]DB\-FILE\f[] will be overwritten unless
\f[I]\-a\f[] (append) is present.
.IP \[bu] 2
\f[B]\-V|\-\-verify\-db \f[I]DB\-FILE\f[] [\-x|\-\-prefer\-hexstring]
[\f[I]\-\-\f[]] [\f[I]FILE\-LIST\f[]] \f[]
.PD 0
.P
.PD
For every \f[I]FILE\f[] in \f[I]FILE\-LIST\f[], check if it has a record
in \f[I]DB\-FILE\f[] and if yes, verify if its current CRC32 checksum
matches the checksum recorded in the database.
If \f[I]\-x\f[] is present, for any tagged \f[I]FILE\f[], the
hexstring\-encoded CRC32 checksum is used for comparison instead of
computing a reference sum.
.PD 0
.P
.PD
If \f[I]FILE\-LIST\f[] is absent, for every \f[I]FILE\f[] recorded in
\f[I]DB\-FILE\f[], check whether the file still exists and if yes,
verify its current CRC32 checksum against the one recorded in the
database.
.SH AUTHORS
Jens Oliver John <asterisk@2ion.de>.
