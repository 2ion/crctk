.TH "crctk" "3" "Sat 1 Mar 2014" "" ""
.SH NAME
.PP
crctk \- CRC32 Hexstring Toolkit
.SH SYNPOSIS
.PP
\f[B]crctk\f[] [\f[I]OPTIONS\f[]]...
[\f[I]\-\-\f[]] [\f[I]FILE\f[]|\f[I]FILE\-LIST\f[]]
.SH DESCRIPTION
.PP
crctk is a program for checking the integrity of files using the CRC32
checksum algorithm and generating CRC32 checksum data.
The CRC32 checksums can be input and output in various ways.
.PP
Similar to tools like sha1sum(1), md5sum(1) and others, \f[I]crctk\f[]
is also used to create database files containing mappings from filepaths
to checksums, which can be used later on to verify a batch of files.
crctk, however, uses a binary format \-\- libtinycdb, an implementation
of Daniel J.
Bernstein\[aq]s CDB \-\- to address a problem with POSIX\-compliant
filepaths in textual form: Because filepaths may contain every character
except \[aq]\[aq] and \[aq]/\[aq], a binary format drastically
simplifies the parsing of filenames, while the textfiles from sha1sum et
al.
do not allow filenames containing \[aq]\[aq], for example.
CDB in turn is very fast, simple and stable.
.SS HEXSTRING TAGS
.PP
Because of their short length, it is common for CRC32 checksums to be
included as hexadecimal strings in the filename of a \f[I]FILE\f[].
Such tags are known to crctk as matching the regular expression
\f[B][[:punct:]]\\?[[:xdigit:]]\\{8\\}[[:punct:]]\\?\f[], that is a
hexadecimal string optionally surrounded by punctuation characters,
including brackets (example: [11FFAABB]).
crctk is also used to manage such tags: it can tag files, update tags
and use the CRC32 information from tags to validate a file.
.SH COMMAND LINE
.SS GENERIC OPTIONS
.IP \[bu] 2
\f[B]\-c|\-\-calc [\-n|\-\-numerical] [\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Compute the CRC32 checksum of \f[I]FILE\f[], print it to stdout and
exit.
If \f[I]\-n\f[] is present, the numerical value will be output instead
of the hexstring.
.IP \[bu] 2
\f[B]\-e|\-\-tag\-regex \f[I]EXPRESSION\f[] \f[]
.PD 0
.P
.PD
Replace the built\-in regex used to match tags (see section:
\f[B]HEXSTRING TAGS\f[]) with \f[I]EXPRESSION\f[].
.IP \[bu] 2
\f[B]\-h|\-\-help\f[]
.PD 0
.P
.PD
Print a help text and exit.
.IP \[bu] 2
\f[B]\-\-version\f[]
.PD 0
.P
.PD
Print an info text containing the compilation date and the program
version.
.IP \[bu] 2
\f[B]\-o|\-\-colors\f[]
.PD 0
.P
.PD
Enable coloured output where available.
Will mess up pipelines, so be careful.
.IP \[bu] 2
\f[B]\-q|\-\-quiet\f[]
.PD 0
.P
.PD
Suppress all output to \f[B]STDOUT\f[] and \f[B]STDERR\f[].
However, if the program aborted due to system error (such as a failed
memory allocation), it will still error out with a debug message.
In theory, this should never happen of course.
.SS OPTIONS INVOLVING TAGS
.IP \[bu] 2
\f[B]\-v|\-\-verify [\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Verify the integrity of \f[I]FILE\f[] using the tag in its filename.
.IP \[bu] 2
\f[B]\-t|\-\-tag [\-s|\-\-strip\-tag] [\-D|\-\-dot INT] [\f[I]\-\-\f[]]
\f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Tag \f[I]FILE\f[] with the hexstring of its CRC32 checksum.
Fails if \f[I]FILE\f[] has already been tagged.
If \f[I]\-s\f[] is present, strip any existing tag before appending the
new one.
By default, the tag is inserted into the filename in front of the last
dot.
In the case of multi\-part suffixes like .tar.gz, it is desireable to
insert the tag in another position.
Using the \-\-dot option, the tag will be inserted in front of the INTth
dot in the filename.
Negative indices are also possible and indicate the INTth\-last dot to
be used.
Zero \[aq]0\[aq] is a nonsense argument to the option and will be
ignored.
\-\-dot defaults to \-1.
.IP \[bu] 2
\f[B]\-r|\-\-remove\-tag [\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
If \f[I]FILE\f[] is tagged, remove the tag.
.IP \[bu] 2
\f[B]\-X|\-\-verify\-hex \f[I]TAG\f[] [\-n|\-\-numerical]
[\f[I]\-\-\f[]] \f[I]FILE\f[] \f[]
.PD 0
.P
.PD
Given a CRC32 code \f[I]TAG\f[], check whether \f[I]FILE\f[] has the
CRC32 code \f[I]TAG\f[].
\f[I]TAG\f[] is expected to be a hexadecimal number, unless
\f[B]\-\-numerical\f[] is active, in which case it is expected to be a
decimal number.
.SS OPTIONS INVOLVING DATABASES
.IP \[bu] 2
\f[B]\-p|\-\-print [\-R|\-\-realpath] \f[I]DB\-FILE\f[] \f[]
.PD 0
.P
.PD
Print all records in \f[I]DB\-FILE\f[] to stdout and exit.
If \-\-realpath is specified, the paths will be printed as absolute
paths.
.IP \[bu] 2
\f[B]\-C|\-\-create\-db \f[I]DB\-FILE\f[] [\-a|\-\-append]
[\-R|\-\-realpath] [\f[I]\-\-\f[]] \f[I]FILE\-LIST\f[] \f[]
.PD 0
.P
.PD
For a every \f[I]FILE\f[] in \f[I]FILE\-LIST\f[], record its path and
CRC32 checksum in the database \f[I]DB\-FILE\f[].
Relative filepaths are used.
If the same path appears more than once in \f[I]FILE\-LIST\f[], the
record will be overwritten.
Any pre\-existing \f[I]DB\-FILE\f[] will be overwritten unless
\f[I]\-a\f[] (append) is present.
If the \f[I]\-R\f[] (realpath) option was specified, the absolute file
paths will be used instead the ones on the command line when storing the
file entries.
.IP \[bu] 2
\f[B]\-V|\-\-verify\-db \f[I]DB\-FILE\f[] [\-x|\-\-prefer\-hexstring]
[\f[I]\-\-\f[]] [\f[I]FILE\-LIST\f[]] \f[]
.PD 0
.P
.PD
For every \f[I]FILE\f[] in \f[I]FILE\-LIST\f[], check if it has a record
in \f[I]DB\-FILE\f[] and if yes, verify if its current CRC32 checksum
matches the checksum recorded in the database.
If \f[I]\-x\f[] is present, for any tagged \f[I]FILE\f[], the
hexstring\-encoded CRC32 checksum is used for comparison instead of
computing a reference sum.
.PD 0
.P
.PD
If \f[I]FILE\-LIST\f[] is absent, for every \f[I]FILE\f[] recorded in
\f[I]DB\-FILE\f[], check whether the file still exists and if yes,
verify its current CRC32 checksum against the one recorded in the
database.
.IP \[bu] 2
\f[B]\-m|\-\-merge \f[I]DB\-FILE\f[] [\-a|\-\-append] [\-R|\-\-realpath]
[\f[I]\-\-\f[]] \f[I]DB\-FILE\-LIST\f[] \f[]
.PD 0
.P
.PD
For every \f[I]DB\-FILE\f[] in \f[I]DB\-FILE\-LIST\f[], merge its the
contents into the database supplied as an paramter to the \-m option.
Duplicate records will overwrite each other in the order they appear.
If \-\-realpath is specified, all paths in the resulting database will
be absolute paths.
For this to work, relative paths in the respective databases must still
be valid relative to the current working directory.
.IP \[bu] 2
\f[B]\-d|\-\-delete \f[I]DB\-FILE\f[] [\f[I]\-\-\f[]]
\f[I]FILE\-LIST\f[] \f[]
.PD 0
.P
.PD
Delete every \f[I]FILE\f[] in \f[I]FILE\-LIST\f[] from \f[I]DB\-FILE\f[]
if it exists.
.IP \[bu] 2
\f[B]\-P|\-\-to\-realpath [\f[I]\-\-\f[]] \f[I]DB\-FILE\-LIST\f[] \f[]
.PD 0
.P
.PD
Convert all paths in the given databases into absolute paths if
possible.
For this to work, any relative paths must still be valid.
.SH EXAMPLES
.PP
No manual be complete without examples.
.PP
Given a file \f[I]archive.tar\f[], calculate its CRC32:
.RS
.PP
crctk \-c \f[I]archive.tar\f[]
.RE
.PP
Affix a CRC32 tag to the filename, renaming the file to
\f[I]archive[AABBCC99].tar\f[]:
.RS
.PP
crctk \-t \f[I]archive.tar\f[]
.RE
.PP
Check whether \f[I]archive[AABBCC99].tar\f[] matches the CRC32 sum
\f[B]AACCBB99\f[] (it doesn\[aq]t):
.RS
.PP
crctk \-X 0xaaccbb99 \f[I]archive[AABBCC99].tar\f[]
.RE
.PP
Verify whether the CRC32 code in the filename matches the file:
.RS
.PP
crctk \-v \f[I]archive[AABBCC99].tar\f[]
.RE
.PP
Record the paths and CRC32 codes of two files in a database:
.RS
.PP
crctk \-C db.crctk \f[I]file1.bin\f[] \f[I]file2.bin\f[]
.RE
.PP
Verify whether all files in the database still match the recorded CRC32
code:
.RS
.PP
crctk \-V db.crctk
.RE
.PP
Check whether a file is recorded in the database and if yes, whether its
CRC32 code matches the recorded one:
.RS
.PP
crctk \-V db.crctk \f[I]file2.bin\f[]
.RE
.PP
Create a database but if the files do already have CRC32 codes recorded
in their filenames, use these in the database record instead of
calculating the CRC32 codes again.
Don\[aq]t truncate but append to an existing database:
.RS
.PP
crctk \-axC db.crctk \f[I]file3[aaccbbee].bin\f[]
.RE
.SH AUTHORS
Jens Oliver John <dev@2ion.de>.
