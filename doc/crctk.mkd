% crctk(3)
% Jens Oliver John <dev@2ion.de>
% Sat  1 Mar 2014

# NAME

crctk - CRC32 Hexstring Toolkit

# SYNPOSIS

__crctk__ [_OPTIONS_]... [_--_] [_FILE_|_FILE-LIST_]

# DESCRIPTION

crctk is a program for checking the integrity of files using the CRC32
checksum algorithm and generating CRC32 checksum data. The CRC32
checksums can be input and output in various ways.

Similar to tools like sha1sum(1), md5sum(1) and others, *crctk* is also
used to create database files containing mappings from filepaths to
checksums, which can be used later on to verify a batch of files. crctk,
however, uses a binary format -- libtinycdb, an implementation of
Daniel J. Bernstein's CDB -- to address a problem with POSIX-compliant
filepaths in textual form: Because filepaths may contain every
character except '\0' and '/', a binary format drastically simplifies
the parsing of filenames, while the textfiles from sha1sum et al. do not
allow filenames containing '\n', for example. CDB in turn is very fast,
simple and stable.

## HEXSTRING TAGS

Because of their short length, it is common for CRC32 checksums to be
included as hexadecimal strings in the filename of a _FILE_. Such
tags are known to crctk as matching the regular expression 
__[[:punct:]]\\?[[:xdigit:]]\\{8\\}[[:punct:]]\\?__, that is a
hexadecimal string optionally surrounded by punctuation characters,
including brackets (example: [11FFAABB]). crctk is also used to manage
such tags: it can tag files, update tags and use the CRC32 information
from tags to validate a file.

# COMMAND LINE

## GENERIC OPTIONS

*   __-c|--calc [-n|--numerical] [_--_] _FILE_ __  
    Compute the CRC32 checksum of _FILE_, print it to stdout and exit.
    If _-n_ is present, the numerical value will be output instead of
    the hexstring.

*   __-e|--tag-regex _EXPRESSION_ __  
    Replace the built-in regex used to match tags (see section:
    __HEXSTRING TAGS__) with _EXPRESSION_.

*   __-h|--help__  
    Print a help text and exit.

*   __--version__   
    Print an info text containing the compilation date and the program
    version.

*   __-o|--colors__   
    Enable coloured output where available. Will mess up pipelines, so
    be careful.

*   __-q|--quiet__  
    Suppress all output to __STDOUT__ and __STDERR__. However, if the
    program aborted due to system error (such as a failed memory
    allocation), it will still error out with a debug message. In
    theory, this should never happen of course.


## OPTIONS INVOLVING TAGS

*   __-v|--verify [_--_] _FILE_ __  
    Verify the integrity of _FILE_ using the tag in its filename.

*   __-t|--tag [-s|--strip-tag] [-D|--dot INT] [_--_] _FILE_ __  
    Tag _FILE_ with the hexstring of its CRC32 checksum. Fails if _FILE_
    has already been tagged. If _-s_ is present, strip any existing tag
    before appending the new one. By default, the tag is inserted into
    the filename in front of the last dot. In the case of multi-part
    suffixes like .tar.gz, it is desireable to insert the tag in another
    position. Using the --dot option, the tag will be inserted in front
    of the INTth dot in the filename. Negative indices are also possible
    and indicate the INTth-last dot to be used. Zero '0' is a nonsense
    argument to the option and will be ignored. --dot defaults to -1.

*   __-r|--remove-tag [_--_] _FILE_ __  
    If _FILE_ is tagged, remove the tag.

*   __-X|--verify-hex _TAG_ [-n|--numerical] [_--_] _FILE_ __  
    Given a CRC32 code _TAG_, check whether _FILE_ has the CRC32 code
    _TAG_. _TAG_ is expected to be a hexadecimal number, unless
    __--numerical__ is active, in which case it is expected to be a
    decimal number.

## OPTIONS INVOLVING DATABASES

*   __-p|--print [-R|--realpath] _DB-FILE_ __   
    Print all records in _DB-FILE_ to stdout and exit. If --realpath is
    specified, the paths will be printed as absolute paths.

*   __-C|--create-db _DB-FILE_ [-a|--append] [-R|--realpath] [_--_] _FILE-LIST_ __   
    For a every _FILE_ in _FILE-LIST_, record its path and CRC32
    checksum in the database _DB-FILE_. Relative filepaths are used.
    If the same path appears more than once in _FILE-LIST_, the record
    will be overwritten. Any pre-existing _DB-FILE_ will be overwritten
    unless _-a_ (append) is present. If the _-R_ (realpath) option was specified, 
    the absolute file paths will be used instead the ones on the command
    line when storing the file entries.

*   __-V|--verify-db _DB-FILE_ [-x|--prefer-hexstring] [_--_] [_FILE-LIST_] __  
    For every _FILE_ in _FILE-LIST_, check if it has a record in
    _DB-FILE_ and if yes, verify if its current CRC32 checksum matches
    the checksum recorded in the database. If _-x_ is present, for any
    tagged _FILE_, the hexstring-encoded CRC32 checksum is used for
    comparison instead of computing a reference sum.  
    If _FILE-LIST_ is absent, for every _FILE_ recorded in _DB-FILE_,
    check whether the file still exists and if yes, verify its current
    CRC32 checksum against the one recorded in the database.

*   __-m|--merge _DB-FILE_ [-a|--append] [-R|--realpath] [_--_] _DB-FILE-LIST_ __  
    For every _DB-FILE_ in _DB-FILE-LIST_, merge its the contents into
    the database supplied as an paramter to the -m option. Duplicate
    records will overwrite each other in the order they appear. If
    --realpath is specified, all paths in the resulting database will be
    absolute paths. For this to work, relative paths in the respective
    databases must still be valid relative to the current working
    directory.

*   __-d|--delete _DB-FILE_ [_--_] _FILE-LIST_ __   
    Delete every _FILE_ in _FILE-LIST_ from _DB-FILE_ if it exists.

*   __-P|--to-realpath [_--_] _DB-FILE-LIST_ __    
    Convert all paths in the given databases into absolute paths if
    possible. For this to work, any relative paths must still be valid.
